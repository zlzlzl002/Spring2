<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	
	<!-- DB 접속 정보를 가지고 있는 문서 읽어들이기 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:com/gura/step04/mybatis/db.properties</value>
		</property>
	</bean>
	<!-- DataSource 설정 -->
	<bean  id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="${driver}"/>
		<property name="url" value="${url}"/>
		<property name="username" value="${username}"/>
		<property name="password" value="${password}"/>
	</bean>
	<!-- SqlSessionFactory 객체 -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation"
			value="classpath:com/gura/step04/mybatis/Configuration.xml"/>
	</bean>
	
	<!-- Dao 에 주입해줄 SqlSession 인터페이스를 구현한 
	SqlSessionTemplate 객체 -->
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!--  1월30일 추가 Transaction Manager 설정 pom.xml Spring Transaction 정의 해야됨  --> <!-- datasourceT ctrl s -->
	<bean id="txManager"  
			class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource"/> <!-- ref 참조값을 넣어줄때 쓰임 -->
	</bean>
	
	<!-- 1월 30일 추가 어노테이션 기반으로 transaction 을 적용하기 위한 설정 -->
	<tx:annotation-driven/>
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven/>

	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- Multipart 폼 전송을 처리하기 위한 bean -->
	
	<bean id="multipartResolver" 
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10240000"/>		
	</bean>
	
	<!-- Abstract view 가 동작하도록 설정 -->
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="0"/>
	</bean>
	
	<context:component-scan base-package="com.gura.step04" />
	
	<!-- com.gura.step04.users 하위의 모든 페키지 스켄하기  -->
	<context:component-scan 
		base-package="com.gura.step04.users.*"/>
	
	<!-- com.gura.step04.file 하위의 모든 페키지 스켄하기  -->
	<context:component-scan 
		base-package="com.gura.step04.file.*"/>
		
	<!-- com.gura.step04.cafe 하위의 모든 페키지 스켄하기  -->
	<context:component-scan 
		base-package="com.gura.step04.cafe.*"/>		
	
	<context:component-scan base-package="com.gura.step04.aspect"/>
	
	<context:component-scan base-package="com.gura.step04.util"/>
	
	<context:component-scan base-package="com.gura.step04.shop.*"/>
	
	<!-- 어노테이션 기반으로 aop 적용할수 있도록 설정 -->
	<aop:aspectj-autoproxy/>

</beans>








